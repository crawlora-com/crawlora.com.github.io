---
import Action from "@/components/Action.astro";

interface Props {
  data: {
    title: string;
    subTitle: string;
    primaryCta: string;
    secondaryCta: string;
    highlightedTitle?: string;
  };
}

const { data } = Astro.props;
---

<html>
  <head>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js"
    ></script>
  </head>
  <body>
    <section id="hero-section" class="mt-48 h-screen">
      <div class="hero-section flex justify-between items-center">
        <div class="hero-section-content md:w-1/2 mr-4">
          <h1 class="text-4xl text-center font-semibold md:text-6xl">
            {data.title}
            <span class="text-primary"> {data.highlightedTitle} </span>
          </h1>
          <h2 class="mt-10 text-lg text-center opacity-80 md:text-2xl">
            {data.subTitle}
          </h2>
          <div class="hero-button flex justify-center mt-10">
            <Action
              as="a"
              type="button"
              class="bg-black text-white"
              href="https://app.dataminer.site"
              target="_blank"
            >
              {data.primaryCta}
            </Action>
            <Action
              as="a"
              class="bg-transparent text-black ml-6 border border-black"
              type="button"
              href="#price-section"
            >
              {data.secondaryCta}
            </Action>
          </div>
        </div>
        <div class="hero-section-language border border-gray-950 rounded-xl">
          <div class="bg-gray-950 rounded-xl">
            <ul class="flex items-center border-b border-white p-4">
              <li
                class="text-white mx-2 rounded-full tab-item active"
                data-tab="tab1"
                data-lang="sql"
              >
                SQL
              </li>
              <li
                class="text-white mx-2 rounded-full tab-item"
                data-tab="tab2"
                data-lang="python"
              >
                Python
              </li>
              <li
                class="text-white mx-2 rounded-full tab-item"
                data-tab="tab3"
                data-lang="r"
              >
                R
              </li>
              <li
                class="text-white mx-2 rounded-full tab-item"
                data-tab="tab4"
                data-lang="java"
              >
                Java
              </li>
              <li
                class="text-white mx-2 rounded-full tab-item"
                data-tab="tab5"
                data-lang="nodejs"
              >
                Node.js
              </li>
            </ul>
            <div class="tab-content p-4 bg-gray-950 rounded-xl">
              <div id="tab1" class="tab-pane active">
                <div id="editor-tab1" style="height: 400px; width: 100%;"></div>
              </div>
              <div id="tab2" class="tab-pane">
                <div id="editor-tab2" style="height: 400px; width: 100%;"></div>
              </div>
              <div id="tab3" class="tab-pane">
                <div id="editor-tab3" style="height: 400px; width: 100%;"></div>
              </div>
              <div id="tab4" class="tab-pane">
                <div id="editor-tab4" style="height: 400px; width: 100%;"></div>
              </div>
              <div id="tab5" class="tab-pane">
                <div id="editor-tab5" style="height: 400px; width: 100%;"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="flex justify-center">
        <Action
          as="a"
          class="flex justify-center items-center animate-bounce border-2 border-transparent bg-primary text-white rounded-full w-14 h-14 mt-32 hover:bg-white hover:text-primary hover:border-primary transition"
          href="#services-section"
          title="arrow down icon"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-8 h-8"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M19.5 13.5 12 21m0 0-7.5-7.5M12 21V3"></path>
          </svg>
        </Action>
      </div>
    </section>
  </body>

  <script type="module">
    document.addEventListener("DOMContentLoaded", () => {
      const loadMonaco = () => {
        require.config({
          paths: {
            vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs",
          },
        });

        require(["vs/editor/editor.main"], () => {
          const editors = {};
          const codeSamples = {
            sql: `-- Get the top-3 busiest train stations
    SELECT station_name, count(*) AS num_services
    FROM train_services
    GROUP BY ALL
    ORDER BY num_services DESC
    LIMIT 3;`,
            python: `# Get the top-3 busiest train stations
    import duckdb
    duckdb.sql("""
        SELECT station, count(*) AS num_services
        FROM train_services
        GROUP BY ALL
        ORDER BY num_services DESC
        LIMIT 3;
        """)`,
            r: `# Find the largest sepals & petals in the Iris data set
    library(duckdb)

    con <- dbConnect(duckdb())
    duckdb_register(con, "iris", iris)

    query <- r'(
    SELECT count(*) AS num_observations,
    max("Sepal.Width") AS max_width,
    max("Petal.Length") AS max_petal_length
    FROM iris
    WHERE "Sepal.Length" > 5
    GROUP BY ALL
    )'

    dbGetQuery(con, query)`,
            java: `// Get a list of train stations by traffic
    Connection conn =
        DriverManager.getConnection("jdbc:duckdb:");
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery(
        "SELECT station_name, count(*) AS num_services\n" +
        "FROM train_services\n" +
        "GROUP BY ALL\n" +
        "ORDER BY num_services DESC;");

    while (rs.next()) {
        System.out.println(rs.getString(1));
        System.out.println(rs.getInt(2));
    }`,
            nodejs: `// Get the top-3 busiest train stations in May
    const duckdb = require('duckdb');
    const db = new duckdb.Database(':memory:');
    db.all(
      ${`SELECT station_name, count(*) AS num_services
        FROM 'http://blobs.duckdb.org/train_services.parquet'
        WHERE monthname(date) = 'May'
        GROUP BY ALL
        ORDER BY num_services DESC
        LIMIT 3;`},
      (err, res) => {
        if (err) {
          console.log("Error", err);
        } else {
          console.table(res);
        }
      }
    );`,
          };

          function createEditor(containerId, language, value) {
            const container = document.getElementById(containerId);
            if (container) {
              if (editors[containerId]) {
                editors[containerId].dispose();
              }
              // eslint-disable-next-line no-undef
              editors[containerId] = monaco.editor.create(container, {
                value: value || "",
                language: language || "plaintext",
                readOnly: true,
                theme: "vs-dark",
              });
            }
          }

          function updateEditorContent() {
            const activeTab = document.querySelector(".tab-item.active");
            if (activeTab) {
              const lang = activeTab.getAttribute("data-lang");
              const tabId = activeTab.getAttribute("data-tab");
              const editorContainerId = `editor-${tabId}`;
              const code = codeSamples[lang];
              createEditor(editorContainerId, lang, code);
            }
          }

          document.querySelectorAll(".tab-item").forEach((item) => {
            item.addEventListener("click", () => {
              document
                .querySelectorAll(".tab-item")
                .forEach((tab) => tab.classList.remove("active"));
              document
                .querySelectorAll(".tab-pane")
                .forEach((pane) => pane.classList.remove("active"));

              item.classList.add("active");
              const tabId = item.getAttribute("data-tab");
              document.getElementById(tabId).classList.add("active");

              // Ensure the editor container ID is correctly referenced
              const editorContainerId = `editor-${tabId}`;
              if (!editors[editorContainerId]) {
                // Initialize editor if not already done
                createEditor(
                  editorContainerId,
                  item.getAttribute("data-lang"),
                  codeSamples[item.getAttribute("data-lang")],
                );
              } else {
                // Update editor content if already initialized
                updateEditorContent();
              }
            });
          });

          // Initialize editor for the first tab on page load
          const firstTab = document.querySelector(".tab-item.active");
          if (firstTab) {
            const firstTabId = firstTab.getAttribute("data-tab");
            const firstLang = firstTab.getAttribute("data-lang");
            const editorContainerId = `editor-${firstTabId}`;
            createEditor(editorContainerId, firstLang, codeSamples[firstLang]);
          }
        });
      };

      if (typeof require === "undefined") {
        const script = document.createElement("script");
        script.type = "text/javascript";
        script.src =
          "https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js";
        script.onload = loadMonaco;
        document.head.appendChild(script);
      } else {
        loadMonaco();
      }
    });
  </script>

  <style>
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    .tab-item {
      background-color: #555;
      color: #fff;
      padding: 10px 20px;
      cursor: pointer;
      margin-right: 10px;
    }

    .tab-item.active {
      background-color: rgb(29 78 216);
      color: #fff;
      font-weight: 500;
    }

    .tab-content {
      display: flex;
      flex-direction: column;
    }

    .tab-pane {
      display: none;
    }

    .tab-pane.active {
      display: block;
    }

    #hero-section {
      opacity: 0;
      animation: fadeIn 0.8s ease-in-out forwards;
    }
    @media screen and (max-width: 1100px) {
      #hero-section {
        height: 100%;
      }
      .hero-section {
        flex-direction: column;
      }
      .hero-section-content,
      .monaco-editor,
      .hero-section-language {
        width: 100%;
      }
      .hero-button {
        margin-bottom: 24px;
      }
    }
  </style>
</html>
